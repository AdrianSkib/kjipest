{"version":3,"sources":["img/bw/rain.svg","img/c/partlycloudy.svg","img/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","listRef","React","createRef","Row","index","style","state","flipList","data","length","id","className","location","kjipestScore","toFixed","src","require","alt","onSelect","value","selection","current","scrollToItem","setState","searchingFor","renderItem","item","renderMenu","items","_","autocompleteStyle","cellHeightCache","clearAll","rowHeight","height","rowCount","rowRenderer","key","parent","Item","cache","rowIndex","cloneElement","onMouseEnter","onMouseDown","e","button","props","onClick","width","minWidth","maxHeight","CellMeasurerCache","defaultHeight","fixedWidth","gotData","currentLoc","currentIndex","currentScore","orderText","locData","hasPos","lat","lon","axios","get","response","dataWithId","map","currentItem","this","document","getElementById","window","innerHeight","innerWidth","navigator","geolocation","getPosData","position","a","coords","longitude","latitude","locresponse","objWithId","find","o","getCurrentPosition","bind","display","flex","itemCount","itemSize","ref","itemData","toString","searchTerm","filter","toLowerCase","includes","getItemValue","onChange","inputProps","placeholder","KjipestList","getLocalScore","getLocalPercentage","type","handleResize","addEventListener","removeEventListener","renderPage","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a35b4c34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rain.48c54bc9.svg\";","module.exports = __webpack_public_path__ + \"static/media/partlycloudy.4330cc36.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.4e7d8046.svg\";","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport {FixedSizeList} from \"react-window\";\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport \"react-virtualized/styles.css\";\nimport Autocomplete from 'react-autocomplete'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.cellHeightCache = new CellMeasurerCache({\n      defaultHeight: 42,\n      fixedWidth: true\n    })\n    this.state = {\n      data: [],\n      searchingFor: '',\n      gotData: false,\n      currentLoc: \"Laster din posisjon\",\n      currentIndex: -1,\n      currentScore: -1,\n      flipList: false,\n      orderText: \"Kjipest – Minst kjipt ↓\",\n      locData: {},\n      hasPos: false,\n      lat: \"\",\n      lon: \"\"\n    };\n  }\n  listRef = React.createRef();\n\n  async componentDidMount() {\n    // const response = await axios.get(\"http://84.214.69.73:8888/\");\n    const response = await axios.get(\"https://kjipest.no/sorted\");\n    const data = await response.data;\n    const dataWithId = data.map((currentItem, index) => {currentItem.index = index; return(currentItem)})\n    this.setState({ data: dataWithId, gotData: true});\n    var main = document.getElementById(\"main\");\n    main.style.height = window.innerHeight - 160 + \"px\";\n    var list = document.getElementById(\"list\");\n    list.style.width = window.innerWidth - 300 + \"px\";\n    var head = document.getElementById(\"categories\");\n    head.style.width = window.innerWidth - 300 + \"px\";\n    if (navigator.geolocation) {\n      async function getPosData(position){\n        // const locresponse = await axios.get(\"http://84.214.69.73:8888/lonlat/\" + position.coords.longitude + \"&\" + position.coords.latitude);\n        const locresponse = await axios.get(\"https://kjipest.no/lonlat/\" + position.coords.longitude + \"&\" + position.coords.latitude);\n        const locData = await locresponse.data;\n        let objWithId = dataWithId.find(o => o.location === locData.location);\n        this.setState({ locData: locData, \n                        currentLoc: locData.location, currentIndex: objWithId.index, currentScore: locData.kjipestScore});\n        this.setState({lat: position.coords.latitude, lon: position.coords.longitude, hasPos: true});\n        };\n      await navigator.geolocation.getCurrentPosition(getPosData.bind(this));\n    }\n  }\n\n  Row = ({ index, style }) => {\n    // If someone can make this not need weird logic for index = this.state.data.length, then I'll love you forever.\n    if (this.state.flipList){\n      if (this.state.data.length -index-3 > 0 ) {\n        index = this.state.data.length-index-3;}\n      else {\n        index = 0;\n      }}\n    return (\n    <div id=\"listelement\" style={style}>\n      <div className=\"elementelement\" id=\"rank\">\n        {index+1}\n      </div>\n      <div className=\"elementelement\" id=\"location\">\n        {this.state.data[index].location}\n      </div>\n      <div className=\"elementelement\" id=\"score\">\n        {this.state.data[index].kjipestScore.toFixed(2)}\n      </div>\n      <div className=\"elementelement\" id=\"icon\">\n        <img src={require(\"./img/bw/rain.svg\")} alt=\"\" />\n      </div>\n    </div>\n  )};\n\n  KjipestList() {\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flex: \"1 1 auto\", height: \"100vh\" }}>\n          <AutoSizer >\n            {({ height, width }) => (\n              <FixedSizeList\n                className=\"List\"\n                height={height}\n                itemCount={this.state.data.length}\n                itemSize={80}\n                width={width}\n                ref={this.listRef}\n                itemData={this.state.flipList}\n              >\n                {this.Row}\n              </FixedSizeList>\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n  onSelect = (value, selection) => {\n    if (this.state.flipList){\n      this.listRef.current.scrollToItem(this.state.data.length - selection.index - 3, \"start\");\n    } else{\n      this.listRef.current.scrollToItem(selection.index, \"start\");\n    }              \n    this.setState({searchingFor: value});}\n\n  renderItem = (item) => {\n    return <div className='searchItem'>{item.location}</div>\n  }\n\n  renderMenu = (items, _, autocompleteStyle) => {\n    this.cellHeightCache.clearAll()\n    const rowRenderer = ({key, index, parent, style}) => {\n      const Item = items[index]\n      const onMouseDown = e => {\n        if(e.button === 0) {\n          Item.props.onClick(e)\n        }\n      }\n      return (\n        <CellMeasurer\n          cache={this.cellHeightCache}\n          key={key}\n          parent={parent}\n          rowIndex={index}\n        >\n          {React.cloneElement(Item, {\n            style: style, \n            key: key, \n            onMouseEnter: null, \n            onMouseDown: onMouseDown\n          })}\n        </CellMeasurer>\n      )\n    }\n    return (\n      <List\n        rowHeight={this.cellHeightCache.rowHeight}\n        height={207}\n        rowCount={items.length}\n        rowRenderer={rowRenderer}\n        width={autocompleteStyle.minWidth || 0}\n        style={{\n          //...customStyles,\n          height: 'auto',\n          maxHeight: '207px'\n        }}\n      />\n    )\n  }\n\n  getLocalScore(){\n    if (this.state.currentScore < 0){\n      return \"__\"\n    }else{\n      return this.state.currentScore.toFixed(2)\n    }\n  }\n\n  getLocalPercentage(){\n    if (this.state.currentScore < 0){\n      return (\"__\")\n    }else{\n      return ((this.state.currentIndex/this.state.data.length*100).toFixed(1).toString() + \" %\")\n    }\n  }\n\n  renderPage() {\n    const searchTerm = this.state.searchingFor;\n    let data = searchTerm \n      ? this.state.data.filter(item =>\n          item.location.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      : []\n    return (\n      <div>\n        <div>\n          <nav>\n            <div className=\"nav\" id=\"search\">\n              {/* <input type=\"search\" name=\"search\" placeholder=\"søk\" value=\"\" /> */}\n              <Autocomplete\n                items={data}\n                value={this.state.searchingFor}\n                \n                renderItem={this.renderItem}\n                renderMenu={this.renderMenu}\n                \n                getItemValue={ item => item.location }\n                onChange={(e, value)=> this.setState({searchingFor: value})}\n                onSelect={this.onSelect}\n                inputProps={{ placeholder: 'søk' }}\n              />\n            </div>\n            <div className=\"nav\" id=\"navlist\">\n              <h2>Liste</h2>\n            </div>\n            <div className=\"nav\">\n              <h2>Kart</h2>\n            </div>\n            <div className=\"nav\">\n              <h2>Info</h2>\n            </div>\n          </nav>\n        </div>\n\n        <div className=\"subheader\">\n          <div id=\"categories\">\n            <div className=\"head\" id=\"crank\">\n              <h3>Rangering</h3>\n            </div>\n            <div className=\"head\" id=\"cloc\">\n              <h3>Sted</h3>\n            </div>\n            <div className=\"head\" id=\"cscore\">\n              <h3 onClick={() => {\n                                  if (this.state.flipList){\n                                    this.setState({ orderText: \"Kjipest – Minst kjipt ↓\" ,\n                                                    flipList: false});\n                                    this.listRef.current.scrollToItem(0, \"start\");\n                                  } else {\n                                    this.setState({ orderText: \"Kjipest – Minst kjipt ↑\" ,\n                                                    flipList: true});\n                                    this.listRef.current.scrollToItem(0, \"start\");\n                                  }}}>\n      {this.state.orderText}</h3>\n            </div>\n            <div className=\"head\" id=\"cicon\">\n              <h3>Værtyper</h3>\n            </div>\n          </div>\n\n          <div id=\"locName\">\n            <p>{this.state.currentLoc}</p>\n            <h3>(Din posisjon)</h3>\n          </div>\n        </div>\n\n        <div id=\"main\">\n          <div id=\"list\">{this.KjipestList()}</div>\n          <div className=\"sidebar\" >\n            <div className=\"localinfo\">\n              <div id=\"localscore\">\n                <h3>Score:</h3>\n                <h1>\n                  {this.getLocalScore()}\n                </h1>\n              </div>\n              <img src={require(\"./img/c/partlycloudy.svg\")} alt=\"\" />\n              <div className=\"localrank\">\n                {/* <h3 className=\"localpercentage\">Topp</h3> */}\n                <h1 className=\"localpercentage\">\n                  {this.getLocalPercentage()}\n                </h1>\n                <h3 className=\"localpercentagebottom\">av Norge har det kjipere enn deg</h3>\n              </div>\n            </div>\n            <div className=\"logo\">\n              <img src={require(\"./img/logo.svg\")} alt=\"\" />\n            </div>\n          </div>\n        </div>\n        <script type=\"text/javascript\" src=\"./script.js\" />\n      </div>\n    );\n  }\n\n  useEffect() {\n    function handleResize() {\n      var main = document.getElementById(\"main\");\n      main.style.height = window.innerHeight - 160 + \"px\";\n      var list = document.getElementById(\"list\");\n      list.style.width = window.innerWidth - 300 + \"px\";\n      var head = document.getElementById(\"categories\");\n      head.style.width = window.innerWidth - 300 + \"px\";\n      window.addEventListener(\"resize\", handleResize);\n    }\n    return (_) => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }\n\n  render() {\n    if (this.state.gotData) {\n      return <div>{this.renderPage()}</div>;\n    } else {\n      return <div></div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}